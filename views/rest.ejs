<div class="container">
    <div class="col-lg-6">
        <div id="geocoder" style="position: absolute; width: 50%; left: 50%; margin-left: -25%; top: 10px;">
        </div>
        <input type="text" id="inp" />
        <div id="hiddenDiv" style="display: none;">
            <input type="text" id="streetNum" name="streetNum" class="form-control" />
            <button type="submit" id="submitBtn" class="btn btn-primary">Submit</button>
        </div>
    </div>
    <div id='map' class="col-lg-6" style='width: 100%; height: 500px; border-radius: 5px; margin-top: 75px;'></div>
</div>
<script>

    mapboxgl.accessToken = 'pk.eyJ1Ijoibm9kaTE5MjEiLCJhIjoiY2tqaGJycDZ2MjZ4bDMxc2NmYjUyMGlsMCJ9.E1UD5UfxO54qrcxYrGxLcw';

    const mapboxClient = mapboxSdk({ accessToken: mapboxgl.accessToken });
    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        zoom: 14,
        center: [18.413962, 43.8553389],
    });

    map.addControl(new mapboxgl.FullscreenControl());
    map.addControl(new mapboxgl.NavigationControl());
    const geocoder = new MapboxGeocoder({
        accessToken: mapboxgl.accessToken,
        mapboxgl: mapboxgl,
        type: 'address',
        placeholder: 'Enter your address',
        marker: false,
    });

    $('#geocoder').append(geocoder.onAdd(map));
    //$('.mapboxgl-ctrl-geocoder').appendTo('#autocomplete');

    const marker = new mapboxgl.Marker({ draggable: true });

    function forwardGeocodeData(input) {
        mapboxClient.geocoding
            .forwardGeocode({
                query: input,
                autocomplete: true,
                limit: 5
            })
            .send()
            .then(function (response) {
                if (
                    response &&
                    response.body &&
                    response.body.features &&
                    response.body.features.length
                ) {
                    var feature = response.body.features[0];
                    //geocoder.query(feature.place_name);
                }
            });
    }

    $('#inp').on('change', function (e) {
        forwardGeocodeData(e.target.value);
    })
   /*  geocoder.on('result', (e) => {
        marker.setLngLat(e.result.center).addTo(map);

        $('#hiddenDiv').fadeIn(1000);

         $('#submitBtn').on('click', function () {
            $.ajax({
                url: '/locations',
                type: 'post',
                data: {
                    lng: e.result.center[0],
                    lat: e.result.center[1],
                    formattedAddress: e.result.place_name,
                    address: e.result.text,
                    streetNum: $('#streetNum').val(),
                },
                success: function (data) {
                    location.reload();
                },
            });
        }); 
    });

    geocoder.on('clear', () => {
        marker.setLngLat([0, 0]);
        $('#streetNum').val('');
        $('#hiddenDiv').fadeOut(1000);
    }); 

    const getReverseGeocodeData = (coords) => {
        mapboxClient.geocoding
            .reverseGeocode({
                query: [coords.lng, coords.lat],
            })
            .send()
            .then(function (response) {
                if (
                    response &&
                    response.body &&
                    response.body.features &&
                    response.body.features.length
                ) {
                    var feature = response.body.features[0];
                    geocoder.query(feature.place_name);
                }
            });
    };

    map.on('click', function (e) {
        const coords = e.lngLat;
        getReverseGeocodeData(coords);
    });

    const onDragEnd = () => {
        const coords = marker.getLngLat();
        getReverseGeocodeData(coords);
    };

    marker.on('dragend', onDragEnd);
*/
</script>